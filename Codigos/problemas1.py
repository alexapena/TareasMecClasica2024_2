# -*- coding: utf-8 -*-
"""MecTaller1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12V3w6S-JhqNNs4BKiNXkVNuwbTDzNFlL
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Parámetros
alfa = np.pi / 3
r = np.linspace(0, 1, 30)
phi = np.linspace(0, 2 * np.pi, 30)
r, phi = np.meshgrid(r, phi)
x = r * np.cos(phi) * np.sin(alfa)
y = r * np.sin(phi) * np.sin(alfa)
z = r * np.cos(alfa)

# Crear la figura y el eje 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Graficar la superficie
ax.plot_surface(x, y, z, cmap='gray', alpha=0.7)

# Puntos
r1 = 1
r2 = 1
th_2 = np.pi / 2  # 90 grados
c2 = np.arctan2((np.cos(th_2 * np.sin(alfa)) - r1 / r2), np.sin(th_2 * np.sin(alfa)))
c1 = np.sin(alfa) * np.cos(c2) * r1

# Coordenadas del punto 1
x1 = r1 * np.cos(0) * np.sin(alfa)
y1 = r1 * np.sin(0) * np.sin(alfa)
z1 = r1 * np.cos(alfa)

# Coordenadas del punto 2
x2 = c1 * np.cos(th_2) * np.sin(alfa)
y2 = c1 * np.sin(th_2) * np.sin(alfa)
z2 = c1 * np.cos(alfa)

# Graficar los puntos 1 y 2
ax.scatter(x1, y1, z1, color='blue', s=100, label='Punto 1')  # Punto 1
ax.scatter(x2, y2, z2, color='green', s=100, label='Punto 2')  # Punto 2

# Graficar la geodésica
th = np.linspace(0, th_2, 100)
r_geo = c1 / (np.sin(alfa) * np.cos(th * np.sin(alfa) + c2))
x_geo = r_geo * np.cos(th) * np.sin(alfa)
y_geo = r_geo * np.sin(th) * np.sin(alfa)
z_geo = r_geo * np.cos(alfa)
ax.plot(x_geo, y_geo, z_geo, color='red', linewidth=2, label='Geodésica')

# Configuración de gráficos
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.set_title('Superficie Cónica')
ax.legend()
ax.view_init(elev=50, azim=47)

plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Parámetros
r1 = 1
r2 = 4
theta = np.pi / 6
g = 9.8

# Cuadrado del momento angular Lz
h2 = 2 * g * r1**2 * r2**2 * np.sin(theta)**2 * np.cos(theta) / (r1 + r2)

# Condiciones iniciales
x0 = [r1, 0, 0]
tspan = (0, 20)

# Definir las ecuaciones diferenciales
def system(t, x):
    r, dr_dt, phi = x
    d2r_dt2 = h2 / (r**3 * np.sin(theta)**2) - g * np.cos(theta)
    dphi_dt = np.sqrt(h2) / (r**2 * np.sin(theta)**2)
    return [dr_dt, d2r_dt2, dphi_dt]

# Resolver las ecuaciones diferenciales
sol = solve_ivp(system, tspan, x0, t_eval=np.linspace(0, 20, 500))

# Extraer las soluciones
r = sol.y[0]
phi = sol.y[2]
x = r * np.cos(phi) * np.sin(theta)
y = r * np.sin(phi) * np.sin(theta)
z = r * np.cos(theta)

# Crear la superficie cónica
phi_grid, r_grid = np.meshgrid(np.linspace(0, 2 * np.pi, 40), np.linspace(0, 4))
x_grid = r_grid * np.cos(phi_grid) * np.sin(theta)
y_grid = r_grid * np.sin(phi_grid) * np.sin(theta)
z_grid = r_grid * np.cos(theta)

# Graficar
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(x_grid, y_grid, z_grid, color='lightgrey', alpha=0.5, edgecolor='none')

# Traza la trayectoria
ax.plot(x, y, z, color='darkred', linewidth=1.5)

# Configurar la vista
ax.view_init(elev=70, azim=120)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.set_title('Movimiento en una superficie cónica')

plt.show()

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Parámetros
r1 = 2
r2 = 2.5  # radios mínimo y máximo
r0 = 2.25
theta = np.pi / 3  # probar con asin(sqrt(3)/6)
w = np.sqrt(9.8 * np.cos(theta) / r0) / np.sin(theta)
W = np.sqrt(3 * 9.8 * np.cos(theta) / r0)
t = np.arange(0, 2 * np.pi * W / w, 0.01)
r = r0 + 0.25 * np.sin(W * t)
phi = w * t - 2 * (0.25 / r0) * (w / W) * np.sin(W * t)
xp = r * np.cos(phi) * np.sin(theta)
yp = r * np.sin(phi) * np.sin(theta)
zp = r * np.cos(theta)

# Configuración de la gráfica
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Superficie cónica
phi = np.linspace(0, 2 * np.pi, 40)
r = np.linspace(0, 4, 40)
phi, r = np.meshgrid(phi, r)
x = r * np.cos(phi) * np.sin(theta)
y = r * np.sin(phi) * np.sin(theta)
z = r * np.cos(theta)
ax.plot_surface(x, y, z, edgecolor='gray', alpha=0.5, rstride=5, cstride=5)

# Trayectoria
ax.plot(xp, yp, zp, color='red', linewidth=1.5)

# Configuración de la vista y etiquetas
ax.view_init(elev=70, azim=120)
ax.grid(True)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.set_title('Movimiento en una superficie cónica')

plt.show()